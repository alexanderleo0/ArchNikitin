# -*- coding: utf-8 -*-
"""Лабораторная работа  Решение задач Классического машинного обучения.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uWtkwIUg04NKxPaKKDxoI0rUBPlSfMZm

Решите пожалуйста следующие задачи.
1. Примените алгоритм KNN (k-ближайших соседей) для данных по
заболеваемости сахарным диабетом. Датасет представлен по ссылке.
Выходной столбец “outcome” принимает значения 0 или 1 и является
классификатором текущего набора данных.
- имеется диабет (значение 1)
- заболевание отсутствует (значение 0)
Используйте все остальные столбцы как data features (входные числовые
данные) для адаптации модели kNN.
Рассчитайте модель kNN для k = 5, 10, 15, 20, 25. Укажите объем тестового
набора данных равным 25% от общего количества данных.
Укажите score модели и постройте визуализацию обученной
классификации для указанных k.
2. Постройте модель множественной линейной регрессии для атрибутов X =
{SkinThickness, BMI} и Y = {Insulin} из датасета предыдущего задания.
Укажите score модели и предоставьте значения b, a1, a2 формулы:
y = b + a1*x1 + a2*x2
3. Примените к указанным данным любую одну модель (решите сами - для задачи
классификации или задачи регрессии) из списка ниже
- SVM
- DecisionTree
- Полиномиальная регрессия
"""

from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/My Drive/content/Copy of diabetes.csv'
import pandas as pd

# Просмотр первых нескольких строк датасета
print(df.head())

# Описание датасета
print(df.info())

# Сводная статистика
print(df.describe())

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt

# Загрузка датасета
df = pd.read_csv(file_path)

# Разделим данные на признаки (X) и метки классов (y)
X = df.drop('Outcome', axis=1)
y = df['Outcome']

# Разделение данных на обучающий и тестовый набор
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

k_values = [5, 10, 15, 20, 25]
scores = []

for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    score = knn.score(X_test, y_test)
    scores.append(score)
    print(f'k={k}, Score={score}')

plt.plot(k_values, scores, marker='o')
plt.title('k-NN Classifier Accuracy for Different Values of k')
plt.xlabel('k (Number of Neighbors)')
plt.ylabel('Accuracy')
plt.show()

"""Постройте модель множественной линейной регрессии для атрибутов X = {SkinThickness, BMI} и Y = {Insulin} из датасета предыдущего задания. Укажите score модели и предоставьте значения b, a1, a2 формулы: y = b + a1x1 + a2x2"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Загрузка датасета
df = pd.read_csv(file_path)

# Выбор атрибутов X и целевой переменной Y
X = df[['SkinThickness', 'BMI']]
Y = df['Insulin']

# Разделение данных на обучающий и тестовый набор
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)

# Создание и обучение модели множественной линейной регрессии
model = LinearRegression()
model.fit(X_train, Y_train)

# Рассчитываем коэффициенты регрессии
b = model.intercept_
a1, a2 = model.coef_

# Рассчитываем score модели
score = model.score(X_test, Y_test)

print(f'Score модели: {score}')
print(f'y = {b} + {a1} * x1 + {a2} * x2')

# Загрузка данных в DataFrame
data = pd.read_csv(file_path)

# Шаг 2: Разделение на признаки и целевую переменную
X = data.drop('Outcome', axis=1)  # data features
y = data['Outcome']  # целевая переменная

# Шаг 3: Разделение данных на обучающий и тестовый наборы
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Шаг 4: Обучение модели полиномиальной регрессии
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import make_pipeline

degree = 2  # Вы можете выбрать желаемую степень полинома
polyreg = make_pipeline(PolynomialFeatures(degree), LogisticRegression())
polyreg.fit(X_train, y_train)

# Шаг 5: Оценка производительности модели
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

y_pred = polyreg.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print("Accuracy:", accuracy)
print("Confusion Matrix:\n", confusion)
print("Classification Report:\n", classification_rep)