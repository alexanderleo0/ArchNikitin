# -*- coding: utf-8 -*-
"""Лабораторнаяработапотеме“ФреймворкиPythonдляML(CatBoost,scikitlearn)”.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LvL2k48pS5Kq31CmA50D2heeyuUEeLiM
"""



"""# Создайте датасет"""

import numpy as np
import pandas as pd

# Создайте случайные данные для датасета
np.random.seed(0)
n_samples = 2000

data = {
    'Предмет 1': np.random.randint(0, 100, n_samples),
    'Предмет 2': np.random.randint(0, 100, n_samples),
    'Предмет 3': np.random.randint(0, 100, n_samples),
    'Предмет 4': np.random.randint(0, 100, n_samples),
    'Предмет 5': np.random.randint(0, 100, n_samples),
    'Предмет 6': np.random.randint(0, 100, n_samples),
    'Итоговая оценка': np.random.choice(['удовлетворительно', 'хорошо', 'отлично'], n_samples)
}

df = pd.DataFrame(data)

"""#Разбейте датасет на тестовую и обучающую выборку:"""

from sklearn.model_selection import train_test_split

X = df.drop('Итоговая оценка', axis=1)
y = df['Итоговая оценка']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

"""#Выберите лучшие 3 признака для обучения."""

from sklearn.feature_selection import SelectKBest, chi2

# Выбираем 3 лучших признака
best_features = SelectKBest(score_func=chi2, k=3)
X_train_new = best_features.fit_transform(X_train, y_train)
X_test_new = best_features.transform(X_test)

"""#Обучите модель, например, используя случайный лес:"""

from sklearn.ensemble import RandomForestClassifier

# Создайте модель
model = RandomForestClassifier(random_state=0)

# Обучите модель на обучающей выборке
model.fit(X_train_new, y_train)

"""#Оцените модель на тестовой выборке:"""

accuracy = model.score(X_test_new, y_test)
print(f"Точность модели на тестовой выборке: {accuracy:.2f}")

"""#Реализуйте функцию для предсказания оценки на основе данных по предметам:"""

def predict_grade(subject_scores, model, best_features):
    # Преобразуйте входные данные, оставив только лучшие признаки
    subject_scores = np.array(subject_scores).reshape(1, -1)
    subject_scores_new = best_features.transform(subject_scores)

    # Предсказание оценки
    prediction = model.predict(subject_scores_new)

    return prediction[0]

# Пример использования функции
subject_scores = [85, 90, 75, 60, 92, 78]  # Замените на оценки по вашим предметам
predicted_grade = predict_grade(subject_scores, model, best_features)
print(f"Прогнозируемая оценка: {predicted_grade}")